// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/** Interface with fields for the base Tag API request. */
export declare interface TagDataParams {
  tag?: TagApiParams;
  more_info?: string;
}

/** Interface with fields that come from our Tag API. */
export declare interface TagApiParams {
  name?: string;
  hidden?: boolean;
  color?: string;
  protect?: boolean;
  description?: string;
  urlsafe_key?: string;
}

/** Interface with fields to create a new tag. */
export declare interface CreateTagRequest {
  tag: TagApiParams;
}

/** Interface with fields to update a new tag. */
export declare interface UpdateTagRequest {
  tag: TagApiParams;
}

/** Interface with fields to get a list of tags from the backend. */
export declare interface ListTagRequest {
  page_size?: number;
  cursor?: string;
  page_index?: number;
  include_hidden_tags?: boolean;
}

/** Interface with fields returned from a list tag request. */
export declare interface ListTagResponseApiParams {
  tags: TagApiParams[];
  cursor: string;
  has_additional_results: boolean;
  total_pages: number;
}

/**
 * Interface with tag objects created from the
 * ListTagResponseApiParams returned from the backend.
 */
export declare interface ListTagResponse {
  tags: Tag[];
  cursor: string;
  has_additional_results: boolean;
  total_pages: number;
}

/** A Tag model with all properties and methods. */
export class Tag {
  /** Name of the tag. */
  name = '';
  /** Frontend visibility of the tag. */
  hidden = false;
  /** Display color for the Tag. */
  color = '';
  /**
   * If the tag can be modified, associated, or disassociated from the
   * frontend.
   */
  protect = false;
  /** Description of the purpose of this tag. */
  description = '';
  /** Unique tag identifier generated by the backend */
  urlSafeKey = '';

  constructor(tag: TagApiParams = {}) {
    this.name = tag.name || this.name;
    this.hidden = tag.hidden || this.hidden;
    this.color = tag.color || this.color;
    this.protect = tag.protect || this.protect;
    this.description = tag.description || this.description;
    this.urlSafeKey = tag.urlsafe_key || this.urlSafeKey;
  }

  /** Translates the Tag model object to the API message. */
  toApiMessage(): TagApiParams {
    return {
      name: this.name,
      hidden: this.hidden,
      color: this.color,
      protect: this.protect,
      description: this.description,
      urlsafe_key: this.urlSafeKey
    };
  }
}
